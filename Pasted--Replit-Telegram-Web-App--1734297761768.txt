Подробное задание для Replit Агент

Цель

Создать приложение в формате Telegram Web App, где пользователь подключается к текущему блоку, участвует в майнинге, а результаты майнинга синхронизируются между всеми участниками. Приложение должно быть полноценно интегрировано с Telegram Web Apps API (версии 8.1) и соответствовать всем стандартам интерфейса Telegram.

Общие требования
	1.	Telegram Web App API:
	•	Использовать window.Telegram.WebApp для:
	•	Получения данных пользователя.
	•	Управления темой приложения (светлая/тёмная).
	•	Отправки уведомлений через бота (если необходимо).
	•	Аутентификация пользователей через HMAC-подпись.
	2.	Геймплей:
	•	Пользователь подключается к текущему блоку, получает его данные.
	•	Запускает майнинг через Web Worker, где устройство подбирает nonce для блока.
	•	После нахождения решения результат отправляется на сервер для проверки.
	3.	Функционал:
	•	Реализация таблицы лидеров.
	•	Личная статистика пользователя.
	•	Система энергии (максимум 100 единиц).
	•	Распределение наград за добытые блоки (60% майнеру, нашедшему решение, 40% остальным).
	4.	UI/UX:
	•	Интерфейс должен полностью соответствовать стандартам Telegram Web App.
	•	Динамическая адаптация темы приложения под светлую/тёмную тему Telegram.
	•	Использование Telegram UI-элементов (MainButton, BackButton).
	5.	Техническая часть:
	•	Бэкенд: Express.js + PostgreSQL для хранения данных.
	•	Фронтенд: React + TypeScript.
	•	Поддержка многопоточного майнинга через Web Workers.
	•	Интеграция с WebRTC для обмена промежуточными данными (в будущем).

План действий для Replit Агент

Шаг 1: Инициализация проекта
	1.	Создать базовую структуру проекта:
	•	Создать две папки: backend и frontend.
	2.	Настроить серверную часть (backend):
	•	Инициализировать Node.js проект:

npm init -y


	•	Установить зависимости:

npm install express pg dotenv cors axios crypto socket.io


	•	Подключить PostgreSQL (использовать встроенный Replit или внешний хостинг).

	3.	Настроить клиентскую часть (frontend):
	•	Инициализировать React проект с TypeScript:

npx create-react-app frontend --template typescript


	•	Установить библиотеки:

npm install axios react-telegram-web-app crypto-js

Шаг 2: Настройка серверной части
	1.	Создать основные файлы:
	•	src/config/db.ts: Подключение к PostgreSQL.
	•	src/routes: Файлы маршрутов (authRoutes, blockRoutes, statsRoutes).
	•	src/services: Логика блоков, наград, пользователей.
	•	src/utils: Утилиты для HMAC-валидации и хеширования блоков.
	2.	Настроить REST API:
	•	Эндпоинты авторизации:
	•	POST /auth/verify: Верификация Telegram пользователя (HMAC).
	•	Эндпоинты блоков:
	•	GET /blocks/current: Получение данных текущего блока.
	•	POST /blocks/solution: Проверка найденного nonce.
	•	Эндпоинты статистики:
	•	GET /stats/leaderboard: Таблица лидеров.
	•	GET /stats/user: Личная статистика.
	3.	Реализовать базовые функции:
	•	Сохранение пользователей (регистрация через Telegram).
	•	Создание блоков, пересчёт сложности, обновление цепочки.
	•	Распределение наград (система 60%/40%).

Шаг 3: Настройка клиентской части
	1.	Инициализировать Telegram Web App:
	•	Подключить react-telegram-web-app для взаимодействия с Telegram.
	•	Реализовать:
	•	Вызов window.Telegram.WebApp.ready() при загрузке.
	•	Обработку данных пользователя через window.Telegram.WebApp.initDataUnsafe.
	2.	Создать основные страницы:
	•	Home: Главная страница с данными текущего блока и кнопкой «Начать майнинг».
	•	Leaderboard: Таблица лидеров.
	•	UserStats: Личная статистика.
	3.	Настроить майнинг через Web Worker:
	•	Создать minerWorker.js для вычисления хэшей в фоновом потоке.
	•	Передавать данные блока и сложность в воркер.
	•	При нахождении решения отправлять данные на сервер.
	4.	Адаптация под тему Telegram:
	•	Слушать изменения темы через window.Telegram.WebApp.onEvent('themeChanged', ...).
	•	Применять стили на основе темы Telegram.

Шаг 4: Интеграция с Telegram Bot API
	1.	Настроить взаимодействие с ботом:
	•	Отправка уведомлений через sendMessage (о найденных блоках, распределении наград).
	•	Использование sendData для передачи данных в бот.
	2.	Добавить платёжные функции (опционально):
	•	Настроить Telegram Payments для покупки энергии или премиум-функций.

Шаг 5: Тестирование и отладка
	1.	Тестировать бэкенд:
	•	Проверить корректность эндпоинтов.
	•	Проверить логику распределения наград.
	•	Проверить HMAC-валидацию.
	2.	Тестировать фронтенд:
	•	Проверить работоспособность майнинга (воркер).
	•	Проверить отображение статистики.
	•	Проверить корректность смены тем.

Структура проекта

project/
├── backend/
│   ├── src/
│   │   ├── config/
│   │   │   ├── db.ts
│   │   │   ├── env.ts
│   │   │   └── index.ts
│   │   ├── routes/
│   │   │   ├── authRoutes.ts
│   │   │   ├── blockRoutes.ts
│   │   │   └── statsRoutes.ts
│   │   ├── services/
│   │   │   ├── blockService.ts
│   │   │   ├── rewardService.ts
│   │   │   └── userService.ts
│   │   ├── utils/
│   │   │   ├── telegramVerify.ts
│   │   │   ├── crypto.ts
│   │   │   └── broadcast.ts
│   │   └── app.ts
│   ├── package.json
│   └── .env
├── frontend/
│   ├── src/
│   │   ├── components/
│   │   │   ├── Leaderboard.tsx
│   │   │   ├── UserStats.tsx
│   │   │   └── MiningDashboard.tsx
│   │   ├── pages/
│   │   │   ├── Home.tsx
│   │   │   ├── Leaderboard.tsx
│   │   │   └── UserStats.tsx
│   │   ├── hooks/
│   │   │   ├── useWebRTC.ts
│   │   │   ├── useMining.ts
│   │   │   └── useEnergy.ts
│   │   ├── workers/
│   │   │   └── minerWorker.js
│   │   ├── utils/
│   │   │   ├── api.ts
│   │   │   └── telegram.ts
│   │   └── App.tsx
│   ├── public/
│   └── package.json
└── README.md

Результат

После выполнения задания Replit Агент должен предоставить:
	1.	Рабочий прототип Telegram Web App.
	2.	Полную интеграцию с Telegram Web App API (инициализация, управление темами).
	3.	Реализованный геймплей майнинга с использованием Web Workers.
	4.	Подключение к PostgreSQL для хранения данных.
	5.	Документацию по запуску и настройке проекта.